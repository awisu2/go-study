// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
)

// Injectors from wire.go:

// 引数は型があっていれば良いみたい
// NewMessage need `message string`
func InitializeEvent(msg string) Event {
	message := NewMessage(msg)
	greeter := NewGreeter(message)
	event := NewEvent(greeter)
	return event
}

func InitializeFooBar() FooBar {
	foo := ProvideFoo()
	bar := ProvideBar()
	fooBar := FooBar{
		MyFoo: foo,
		MyBar: bar,
	}
	return fooBar
}

func InitializeVoice() ManVoice {
	string2 := _wireStringValue
	normalMan := ProvideNormalMan(string2)
	manVoice := ProvideManVoice(normalMan)
	return manVoice
}

var (
	_wireStringValue = "woooo"
)

func InitializeVoiceWithSet() ManVoice {
	string2 := _wireStringValue2
	normalMan := ProvideNormalMan(string2)
	manVoice := ProvideManVoice(normalMan)
	return manVoice
}

var (
	_wireStringValue2 = "woooo"
)

// Injectors from wire_clone.go:

// 引数は型があっていれば良いみたい
// NewMessage need `message string`
func InitializeEventClone(msg string) Event {
	message := NewMessage(msg)
	greeter := NewGreeter(message)
	event := NewEvent(greeter)
	return event
}

// wire.go:

// 条件で分けて異なるProviderを使用
func InitializeEventWithIf(msg string) Event {
	if msg == "" {
		wire.Build(NewEvent, NewGreeter, NewMessage2)
		return Event{}
	} else {
		wire.Build(NewEvent, NewGreeter, NewMessage)
		return Event{}
	}
}

var ManvoiceSet = wire.NewSet(wire.Value("woooo"), ProvideNormalMan, wire.Bind(new(InterfaceMan), new(*NormalMan)), ProvideManVoice)
